<Graph ClassName="ReviewGraphExtensions" Source="#CDATA" IsNew="True" FileType="NewGraph">
    <CDATA name="Source"><![CDATA[using System;
using PX.Data;
using PX.Objects;
using PX.Objects.SO;
using PX.Common;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Linq;


namespace ReviewExtensions
{
    public class ReviewGraphAndCacheExtensions : PXGraph<ReviewGraphAndCacheExtensions>
    {
        public PXCancel<FilterTable> Cancel;

        public PXFilter<FilterTable> FilterView;
        public PXFilter<DetailsTable> DetailsView;

        public IEnumerable detailsView()
        {
           if (FilterView.Current == null)
                yield break;
          string fullTypeName = FilterView.Current.FullObjectName;
            if (!String.IsNullOrEmpty(fullTypeName))
            {
                Type objectType = Assembly.GetAssembly(typeof(SOShipmentEntry)).GetType(fullTypeName);
                if(objectType!=null){
                PXGraph graph = null;
                try
                {
                    // Acuminator disable once PX1084 GraphCreationInDataViewDelegate [It's ok if you relally need it and understand the consequences]
                    graph = PXGraph.CreateInstance(objectType);

                }
                catch { }
                if (graph != null)
                {
                    PXGraphExtension[] extensions = graph.GetType().GetProperty("GraphExtensions", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(graph) as PXGraphExtension[];
                    foreach (PXGraphExtension ext in extensions)
                    {
                        yield return new DetailsTable() { GraphOrDACExtensionName = ext.GetType().FullName, AssemblyName = ext.GetType().Assembly.FullName };
                    }
                }
                else 
                {
                       PXCache cache=null;
                     try
                    {
                        // Acuminator disable once PX1084 GraphCreationInDataViewDelegate [It's ok if you relally need it and understand the consequences]
                       cache = this.Caches[objectType];

                    }
                    catch { }
                    if (cache != null)
                    {
                          foreach (Type ext in cache.GetExtensionTypes())
                        {
                            yield return new DetailsTable() { GraphOrDACExtensionName = ext.FullName, AssemblyName = ext.Assembly.FullName };
                        }
                  }
                }
            }
                      }
        }
                      
        protected virtual void _(Events.FieldUpdated<FilterTable.objectName> e)
        {
        FilterTable row = (FilterTable)e.Row;
          if(row !=null && !String.IsNullOrEmpty(row.ObjectName))
            {
                      Type objectType = Assembly.GetAssembly(typeof(SOShipmentEntry)).GetType(row.ObjectName);
                      if(objectType ==null)
                      objectType =  Assembly.GetAssembly(typeof(SOShipmentEntry)).GetTypes().Where(t=>t.Name==row.ObjectName).FirstOrDefault();
                        if(objectType !=null)
                      row.FullObjectName=objectType.FullName;
                    }          
        }

        [Serializable]
        public class FilterTable : IBqlTable
        {
            public abstract class objectName: PX.Data.BQL.BqlString.Field<objectName> { }
            [PXString(4000, IsKey = true)]
            [PXDefault("SOShipmentEntry")]
            [PXUIField(DisplayName = "Graph or DAC Name")]
            public virtual string ObjectName{ get; set; }
                             
            public abstract class fullObjectName: PX.Data.BQL.BqlString.Field<fullObjectName> { }
            [PXString(4000)]
            [PXUIField(DisplayName = "Full Name", Enabled = false)]
            public virtual string FullObjectName{ get; set; }

        }


        [Serializable]
        public class DetailsTable : IBqlTable
        {
            public abstract class graphOrDACExtensionName : PX.Data.BQL.BqlString.Field<graphOrDACExtensionName> { }
            [PXString(4000, IsKey = true)]
            [PXUIField(DisplayName = "Graph Extension Name" )]
            public virtual string GraphOrDACExtensionName { get; set; }


            public abstract class assemblyName : PX.Data.BQL.BqlString.Field<assemblyName> { }
            [PXString(4000)]
            [PXUIField(DisplayName = "Assembly Name")]
            public virtual string AssemblyName { get; set; }

        }

    }
}]]></CDATA>
</Graph>